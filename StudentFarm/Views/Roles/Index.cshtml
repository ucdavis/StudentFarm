@{
    ViewBag.Title = "Users";
}

@section subhead {
    <h2>Manage User Permissions</h2>
}

<a class="btn btn-primary main-action" href="#add_user" role="button" data-toggle="modal">
    <i class="icon-plus"></i> Add New User
</a>

<!-- Add User Dialog Box -->
<div id="add_user" class="modal hide">
    <div class="modal-header">
        <a class="close" href="#" data-dismiss="modal" aria-hidden="true">&times;</a>
        <h3>Add New User</h3>
    </div>
    <div class="modal-body">
        <div id="add_user_msg"><!-- Placeholder for alert to be inserted from XHR. Kinda hackish. --></div>
        <form id="add_user_frm">
            <label for="name" class="heading">Username</label>
                <input type="text" id="name" name="name" placeholder="Kerberos Username" />

            <h3>Roles</h3>
            @foreach(string role in ViewBag.Roles) {
                <label class="checkbox">
                    <input type="checkbox" id="r_@role" name="r_@role" /> @role
                </label>
            }
            <h3>Groups</h3>
            @foreach(StudentFarm.Models.Buyer buyer in ViewBag.Buyers) {
                <label class="checkbox">
                    <input type="checkbox" id="b_@buyer.Name" name="b_@buyer.Name" /> @buyer.Name
                </label>
            }
            @Html.AntiForgeryToken()
        </form>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn" data-dismiss="modal">Cancel</a> <a id="add_user_btn" href="#" class="btn btn-primary">Add</a>
    </div>
</div>


<!-- Edit User Dialog Box -->
<div id="edit_user" class="modal hide">
    <div class="modal-header">
        <a class="close" href="#" data-dismiss="modal" aria-hidden="true">&times;</a>
        <h3></h3>
    </div>
    <div class="modal-body">
        <div id="edit_user_msg"><!-- Placeholder for alert to be inserted from XHR. Kinda hackish. --></div>
        <form id="edit_user_frm" class="form-horizontal">
            <label for="name" class="heading">Username</label>
                <input type="text" id="e_name" name="name" placeholder="Kerberos Username" disabled="disabled" />

            <h3>Roles</h3>
            @foreach(string role in ViewBag.Roles) {
                <label class="checkbox">
                    <input type="checkbox" id="er_@role" name="r_@role" /> @role
                </label>
            }
            <h3>Groups</h3>
            @foreach(StudentFarm.Models.Buyer buyer in ViewBag.Buyers) {
                <label class="checkbox">
                    <input type="checkbox" id="eb_@buyer.Name" name="b_@buyer.Name" /> @buyer.Name
                </label>
            }
            @Html.AntiForgeryToken()
        </form>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn" data-dismiss="modal">Cancel</a> <a id="edit_user_btn" href="#" class="btn btn-primary">Edit</a>
    </div>
</div>

<table class="table table-striped" id="main_tab">
    <tr>
        <th style="width: 15%;">Username</th>
        <th>Roles</th>
        <th>Groups</th>
        <th>&nbsp;</th>
    </tr>
    
@foreach (KeyValuePair<string, List<string>> item in ViewBag.UserRoles) {
    List<string> roles = new List<string>();
    List<string> groups = new List<string>();
    <tr id="user_@item.Key">
        <td>@item.Key</td>
        <td>
            @foreach (string role in item.Value.AsQueryable().Where(x => x.Contains("r_")).ToArray())
            {
                roles.Add(role.Substring(2));
            }
            @string.Join(", ", roles.ToArray())
        </td>
        <td>
            @foreach (string group in item.Value.AsQueryable().Where(x => x.Contains("b_")).ToArray())
            {
                groups.Add(group.Substring(2));
            }
            @string.Join(", ", groups.ToArray())
        </td>
        <td class="actions-column"><a class="btn btn-success" href="#e_@item.Key"><i class="icon-pencil"></i> Edit</a> <a class="btn btn-warning" href="#d_@item.Key"><i class="icon-remove"></i> Delete</a></td>
    </tr>
}
</table>
<div id="xhr_token">@Html.AntiForgeryToken()</div>

@section AdditionalScripts {
<script type="text/javascript">
    // Basic functions for modifying and grabbing values in the displayed table
    function UserRow(name) {
        this.row = document.getElementById('user_' + name);
        this.row_items = this.row.getElementsByTagName('td');
    }

    // Returns the requested value (either name, desc(ription), or organic)
    UserRow.prototype.get = function (item) {
        switch (item) {
            case 'name':
                return this.row_items[0].innerHTML;
                break;
            case 'roles':
                return this.row_items[1].innerHTML.trim().split(', ');
                break;
            case 'groups':
                return this.row_items[2].innerHTML.trim().split(', ');
                break;
        }
    }

    // Sets the requested value (either name, desc(ription), or organic)
    UserRow.prototype.set = function (item, value) {
        switch (item) {
            case 'name':
                this.row_items[0].innerHTML = value;
                break;
            case 'roles':
                this.row_items[1].innerHTML = value;
                break;
            case 'groups':
                this.row_items[2].innerHTML = value;
                break;
        }
    }

    // Clears all form values after successful addition to database and displayed table
    function clear_form(frm) {
        for (var i = 0; i < frm.elements.length; i++) {
            if (frm.elements[i].name != 'name')
                frm.elements[i].checked = "";
            else
                frm.elements[i].value = "";
        }
    }

    // Modifies table appropriately (either editing or adding stuff)
    function modify_table(username, roles, groups, action) {
        if (action == 'add_user') {
            add_to_table(username, roles, groups);
        }
        else if (action == 'edit_user') {
            edit_table(username, roles, groups);
        }
    }

    function edit_table(username, roles, groups) {
        var row = new UserRow(username);

        row.set('name', username);
        row.set('roles', roles);
        row.set('groups', groups);
    }

    // Adds stuff from the form to the table.
    function add_to_table(username, roles, groups) {
        $('#main_tab').append('<tr id="user_' + username + '">' +
            '<td>' + username + '</td>' +
            '<td>' + roles + '</td>' +
            '<td>' + groups + '</td>' +
            '<td class="actions-column"><a class="btn btn-success" href="#e_' + username + '"><i class="icon-pencil"></i> Edit</a> <a class="btn btn-warning" href="#d_' + username + '"><i class="icon-remove"></i> Delete</a></td>' +
            '</tr>');
        // TODO: Need to somehow init_buttons() for the buttons added in this method.
        // Perhaps:
        init_buttons();
    }

    function check_approp_boxes(frm, prefix, arr) {
        for (var r = 0; r < arr.length; r++) {
            if (arr[r].length > 0)
                frm.elements[prefix + arr[r]].checked = 'checked';
        }
    }

    function init_buttons() {
        // Add actions for each Edit and Delete button.
        var token = document.getElementById('xhr_token').getElementsByTagName('input').item(0).value;

        var button_wraps = document.getElementsByClassName('actions-column');
        for (var i = 0; i < button_wraps.length; i++) {
            var buttons = button_wraps[i].getElementsByTagName('a');
            for (var c = 0; c < buttons.length; c++) {
                buttons[c].addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    var id = this.href.substr(this.href.indexOf('_') + 1);

                    // Populate form with data.
                    if (this.href.indexOf('e_') != -1) {
                        var row = new UserRow(id);

                        var frm = document.getElementById('edit_user_frm');
                        clear_form(frm);

                        var roles = row.get('roles');
                        var groups = row.get('groups');

                        frm.name.value = id;
                        
                        check_approp_boxes(frm, "r_", roles);
                        check_approp_boxes(frm, "b_", groups);

                        $('#edit_user h3').first().text('Editing ' + frm.name.value);

                        $('#edit_user').modal();
                    }

                    // Should have confirmation dialog for this.
                    else if (this.href.indexOf('d_') != -1) {
                        (function (self) {
                            $.post('@(ViewBag.url)roles/delete/' + id, '__RequestVerificationToken=' + token, function () {
                                var row = self.parentNode.parentNode;
                                row.parentNode.removeChild(row);
                            });
                        }(this));
                    }
                });
            }
        }
    }
    
    function init_modalbuttons() {
        var modals = ['add_user', 'edit_user'];
        var main_table = document.getElementById('main_tab');

        // Add actions for clicking the Add/Edit button in the modals.
        for (var i in modals) {
            (function (i) {
                var add_btn = document.getElementById(modals[i] + '_btn');

                add_btn.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    var msg = document.getElementById(modals[i] + '_msg');
                    var frm = document.getElementById(modals[i] + '_frm');

                    var url = modals[i] == 'add_user' ? '@(ViewBag.url)roles/create' : '@(ViewBag.url)roles/edit/' + frm.name.value;

                    $.post(url, $('#' + modals[i] + '_frm').serialize(),
                        function (data, status) {
                                msg.innerHTML = data.alert;

                                if (data.id != -1) { modify_table(data.username, data.roles, data.groups, modals[i]); }
                                if (modals[i] == 'add_user') { clear_form(frm); }

                                setTimeout(function () {
                                    msg.innerHTML = "";
                                }, 3000);
                            }
                        );
                });
            }(i));
        }
    }

    function init() {
        init_modalbuttons();
        init_buttons();
    }

    init();
</script>    
}
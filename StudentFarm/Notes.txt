 Order Controller Index Page:

 Need to display list of availabilities that can be ordered from.
 Info needed to do this:
 Buyer groups for the current user, unless admin, in which case everything can be viewed/edited.

------------- 
 
 @if (ViewBag.edit != -1) {
        <text>
            // Checks the input elements name against an array of names.
            function check(item, names) {
                for (var i = 0; i < names.length; i++) {
                    if (item == names[i]) {
                        return true;
                    }
                }
                return false;
            }

            // Returns a function that assigns a value of -1 to certain input
            // elements. The returned function is used in the onchange event
            // for input type="text" elements in the table. If anything existing
            //  is changed in the table, the many-to-many record ids 
            // become invalid, and we want to indicate that.
            function markChanged(change_cp) {
                var checker;
                if (change_cp) {
                    checker = function(item) {
                        return check(item, ['cp_id', 'offered_id']);
                    };
                }
                else {
                    checker = function(item) {
                        return check(item, ['offered_id']);
                    };
                }

                return function () {
                    var row = this.parentNode.parentNode;
                    if (row.className != 'changed') {
                        var search = row.getElementsByTagName('input');
        </text>
        @:              for (var i = 0; i < search.length; i++) {
        <text>
                            if (checker(search[i].name)) {
                                search[i].value = -1;
                                row.className = 'changed';
                            }
                        }
                    }
                };
            }

            // Watch all existing fields for changes.
            $('input[type="text"]').each(function (i, el) {
                switch (el.name) {
                    case 'product':
                        el.addEventListener('change', markChanged(true));
                        break;
                    case 'packsize':
                        el.addEventListener('change', markChanged(true));
                        break;
                    case 'unitprice':
                        el.addEventListener('change', markChanged(true));
                        break;
                    case 'amount':
                        el.addEventListener('change', markChanged(false));
                        break;
                }
            });
        </text>
    }

	Two hundred fifty-two thousand five hundred sixty-two
	2
	60
	100
	5
	1000
	2
	50
	100
	2

	2
	100
	50
	2
	1000
	5
	100
	60
	2

	2 (< --> *) 100
	200 (> && <1000 --> +) 50
	250 (> && <1000 --> +) 2
	252 (< --> *) 1000
	252000 (> --> .) 5
	252000 (> --> .) 5 (< --> *) 100
	252000 (> --> .) 500 (> && <1000 --> +) 60
	252000 (> --> .) 560 (> && <1000 --> +) 2
	252000 : 562
	252562

	sixty-five
	

	the Thursday
	one day
	a day and a week
	a month and a day
	one month, two days
	a day or two and a month.

	Maybe split on "and"?
	and
	&
	+

	-------

	0 Sunday
	1 Monday
	2 Tuesday
	3 Wednesday
	4 Thursday
	5 Friday
	6 Saturday

	Algorithm for getting the number of days between two weekdays?

	Thinking:
	It's Tuesday (2). The Thursday before would be:

	2 + 7 = 9 - 4 = 5 days?

	It's Sunday. The Saturday before would be:
	0 + 7 = 7 - 6 = 1 day.

	Add 7, subtract day.


	Old stuff from Availability/OffersFrom and the associated function under XHR in Index.cshtml:

	C#:
	// List<Dictionary<String, String>> offers = new List<Dictionary<String, String>>();

	    /*
    Dictionary<String, String> data = new Dictionary<String, String>();
    data.Add("start", avail.DateStart.ToShortDateString());
    data.Add("end", avail.DateEnd.ToShortDateString());
    data.Add("count", avail.Offered.Count.ToString());
    data.Add("buyers", avail.GetBuyerNames());
    data.Add("total", "");
    data.Add("id", avail.Id.ToString());

    offers.Add(data); */

	JS:
	for (var i = 0; i < avails.length; i++) {
        disp.innerHTML += "<tr>" +
            "<td>" + avails[i].start + "</td>" +
            "<td>" + avails[i].end + "</td>" +
            "<td>" + avails[i].count + "</td>" +
            "<td>" + avails[i].buyers + "</td>" +
            "<td>" + avails[i].total + "</td>" +
            '<td class="actions-column">' +
                '<a class="btn btn-primary" href="@(ViewBag.url)availability/create/' + avails[i].id + '"><i class="icon-retweet"></i> Copy</a> <a class="btn" href="@(ViewBag.url)availability/details/' + avails[i].id + '"><i class="icon-file"></i> View</a>' +
            "</td>" +
        "</tr>";
    }